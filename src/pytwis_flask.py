import datetime
from flask import Flask
import json
from pytwis_clt import pytwis_cli_init
from pytwis import Pytwis
from pytwis import PytwisConst
from flask import request


## Todo
## Need to add request context information in to the result json strig.#
# requestId <- from a request.
# command
# userAuthSecrete <- from a request. or generated by login
# sessionId <- we don't support a session yet.
# referenceTag <- tag for filtering log

## Logging
# Call log --> String dump. so we can replay traffic for testing performance
# Response log
# --> ELK (Elastic search, Log stash, and Kibana) setup for this?


## Commands
# Init
# http://127.0.0.1:4000/init?server=<ip_address>&port=<port>&password=<password>
# Tweet
# http://127.0.0.1:4000/pytwis?cmd=register&username=bjlee3&password=test3
# http://127.0.0.1:4000/pytwis?cmd=login&username=bjlee3&password=test3
# http://127.0.0.1:4000/pytwis?cmd=followers&auth=<auth_key>
# http://127.0.0.1:4000/pytwis?cmd=post&tweet=test12345&auth=<auth_key>
# http://127.0.0.1:4000/pytwis?cmd=timeline&auth=<auth_key>

app = Flask(__name__)

@app.route('/')
def homepage():
    return "Hello Sammamish Study Group"

@app.route('/test', methods=['GET','POST'])
def test_request():
    try:
        if(request.method == 'GET'):
            name = request.args['name']
            return 'GET' + name
    except ValueError as e:
        return "error"

@app.route('/pytwis', methods=['GET'])
def pytwis_get_request():

    command = request.args[PytwisConst.CMD]
    print(command)
    command_with_args = [request.args[PytwisConst.CMD], request.args]

    if(PytwisConst.AUTH in request.args):
        auth_key = request.args[PytwisConst.AUTH]
    else:
        auth_key = ''

    response = pytwis_get_request_processor(g_twis, auth_key, command_with_args)

    jsonResponse = json.loads(response)
    print(json.dumps(jsonResponse, sort_keys=True, indent=4))  # Beautified Json for debugging with logs

    return response

def pytwis_get_request_processor(twis, auth_secret, command_with_args):
    command = command_with_args[0]
    args = command_with_args[1]
    print("pytwis_get_request_processor")

    if command == PytwisConst.CMD_REGISTER:
        succeeded, result = twis.register(args[PytwisConst.USER_NAME], args[PytwisConst.PASSWORD])
    elif command == PytwisConst.CMD_LOGIN:
        succeeded, result = twis.login(args[PytwisConst.USER_NAME], args[PytwisConst.PASSWORD])
    elif command == PytwisConst.CMD_LOGOUT:
        succeeded, result = twis.logout(auth_secret)
    elif command == PytwisConst.CMD_CHANGE_PASSWORD:
        succeeded, result = twis.change_password(auth_secret, args[PytwisConst.OLD_PASSWORD], args[PytwisConst.NEW_PASSWORD])
    elif command == PytwisConst.CMD_POST:
        succeeded, result = twis.post_tweet(auth_secret, args[PytwisConst.TWEET])
    elif command == PytwisConst.CMD_FOLLOW:
        succeeded, result = twis.follow(auth_secret, args[PytwisConst.FOLLOWEE])
    elif command == PytwisConst.CMD_UNFOLLOW:
        succeeded, result = twis.unfollow(auth_secret, args[PytwisConst.FOLLOWEE])
    elif command == PytwisConst.CMD_FOLLOWERS:
        succeeded, result = twis.get_followers(auth_secret)
    elif command ==PytwisConst.CMD_FOLLOWINGS:
        succeeded, result = twis.get_following(auth_secret)
    elif command == PytwisConst.CMD_TIMELINE:
        if(PytwisConst.MAX_TWEET_CNT in args):
            succeeded, result = twis.get_timeline(auth_secret, int(args[PytwisConst.MAX_TWEET_CNT]))
        else:
            succeeded, result = twis.get_timeline(auth_secret, g_twis.GENERAL_TIMELINE_MAX_POST_CNT)
    else:
        pass

    return json.dumps(result)

g_twis = None
# g_twis =  Pytwis("hostname", "port", dbNumber, "<password")

@app.route('/init', methods=['GET'])
def init():
    try:
        global g_twis

        if(request.method == 'GET'):
            server = request.args['server']
            port = request.args['port']
            dbId = request.args['db']
            password = request.args[PytwisConst.PASSWORD]

            g_twis =  Pytwis(server, port, dbId, password)
            if twis is None:
                return "Error"
            else:
                return "Success"
    except ValueError as e:
        return "error"


if __name__ ==  "__main__":
    if g_twis == None:
        g_twis, arg = pytwis_cli_init()

    if g_twis != None:
        app.run(port=4000, debug=True)